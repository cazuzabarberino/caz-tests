{"version":3,"sources":["ResizableColumn.tsx","App.tsx","index.tsx"],"names":["itemStyle","borderRight","boxSizing","textOverflow","whiteSpace","overflow","ResizableColumn","divRef","useRef","dragData","isDragging","currentColumn","startX","columns","startDragging","columnIndex","current","endDragging","dragging","x","mouseDragAmount","maxDragAmount","minDragAmount","columnDragAmount","Math","max","min","newColumns","templateColumns","reduce","prev","width","i","style","gridTemplateColumns","cursor","ref","height","display","gridAutoFlow","border","position","top","left","gridAutoColumns","onMouseMove","e","window","getComputedStyle","split","map","text","Number","replace","getColumnsWidth","clientX","buttons","offsetLeft","isLeftButtonPressed","accumulator","isOnBorder","length","abs","CheckGridBorder","onDragStart","preventDefault","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sKAEMA,EAAiC,CACrCC,YAAa,kBACbC,UAAW,aACXC,aAAc,WACdC,WAAY,SACZC,SAAU,UAmKGC,MAzJf,WACE,IAAMC,EAASC,iBAAuB,MAChCC,EAAWD,iBAAiB,CAChCE,YAAY,EACZC,eAAgB,EAChBC,OAAQ,EACRC,QAAS,KA6DLC,EAAgB,SAAH,GAQZ,IAPLC,EAAW,EAAXA,YACAF,EAAO,EAAPA,QACAD,EAAM,EAANA,OAMAH,EAASO,QAAU,CACjBL,cAAeI,EACfL,YAAY,EACZE,SACAC,UAEJ,EAEMI,EAAc,WACbV,EAAOS,UACZP,EAASO,QAAU,CACjBL,eAAgB,EAChBD,YAAY,EACZE,OAAQ,EACRC,QAAS,IAEb,EAEMK,EAAW,SAACC,GAChB,MAA2CV,EAASO,QAA5CL,EAAa,EAAbA,cAAeC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC/B,KAAIF,EAAgB,IAAMJ,EAAOS,QAAjC,CACA,IAAMI,EAAkBD,EAAIP,EAEtBS,EAAgBR,EAAQF,EAAgB,GADvB,GAEjBW,IAAkBT,EAAQF,GAFT,IAGjBY,EAAmBC,KAAKC,IAC5BD,KAAKE,IAAIN,EAAiBC,GAC1BC,GAEIK,EAAU,YAAOd,GACvBc,EAAWhB,IAAkBY,EAC7BI,EAAWhB,EAAgB,IAAMY,EACjC,IAAMK,EAAkBD,EAAWE,QAAO,SAACC,EAAMC,EAAOC,GACtD,OAAOF,EAAOC,EAAQ,KACxB,GAAG,IACHxB,EAAOS,QAAQiB,MAAMC,oBAAsBN,EAC3CrB,EAAOS,QAAQiB,MAAME,OAAS,UAhBkB,CAiBlD,EAEA,OACE,sBACEC,IAAK7B,EACL0B,MAAO,CACLF,MAAO,QACPM,OAAQ,QACRC,QAAS,OACTC,aAAc,SACdC,OAAQ,kBACRC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNzC,UAAW,aACX0C,gBAAiB,OAEnBC,YA9FoB,SAACC,GACvB,GAAKvC,EAAOS,QAAZ,CACA,IAAMH,EA7BgB,WACtB,GAAKN,EAAOS,QAOZ,OANwB+B,OAAOC,iBAC7BzC,EAAOS,SACPkB,oBAECe,MAAM,KACNC,KAAI,SAACC,GAAI,OAAKC,OAAOD,EAAKE,QAAQ,KAAM,IAAI,GAEjD,CAoBkBC,GAChB,GAAKzC,EAAL,CACA,IAAQ0C,EAAqBT,EAArBS,QAASC,EAAYV,EAAZU,QAEXrC,EAAIoC,EADahD,EAAOS,QAAtByC,WAGFC,EAAkC,IAAZF,EACpB9C,EAAeD,EAASO,QAAxBN,WAER,GAAIA,EACEgD,EAAqBxC,EAASC,GAC7BF,QAFP,CAMA,MAjCsB,SAACE,EAAWN,GAIlC,IAHA,IAAI8C,EAAc,EACdC,GAAa,EACb7C,EAAc,EACTiB,EAAI,EAAGA,EAAInB,EAAQgD,OAAS,EAAG7B,IAEtC,GADA2B,GAAe9C,EAAQmB,GACnBR,KAAKsC,IAAI3C,EAAIwC,IAAgB,EAAG,CAClCC,GAAa,EACb7C,EAAciB,EACd,KACF,CAGF,MAAO,CAAE4B,aAAY7C,cACvB,CAmBsCgD,CAAgB5C,EAAGN,GAA/C+C,EAAU,EAAVA,WAAY7C,EAAW,EAAXA,aAEhB2C,GAAwBhD,EAS5BH,EAAOS,QAAQiB,MAAME,OAASyB,EAAa,WAAa,GARtD9C,EAAc,CACZC,YAAa6C,EAAa7C,GAAe,EACzCH,OAAQO,EACRN,WARJ,CAZoB,CAFO,CA4B7B,EAkEImD,YAAa,SAAClB,GAAC,OAAKA,EAAEmB,gBAAgB,EAAC,UAEvC,qBAAKhC,MAAOjC,EAAU,4kBAWtB,qBAAKiC,MAAOjC,IACZ,qBAAKiC,MAAOjC,IACZ,qBAAKiC,MAAOjC,IACZ,qBAAKiC,MAAOjC,IACZ,0BAGN,ECjKekE,MAJf,WACE,OAAO,cAAC,EAAe,GACzB,ECDAC,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,Q","file":"static/js/main.dd281207.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\n\r\nconst itemStyle: React.CSSProperties = {\r\n  borderRight: \"1px solid black\",\r\n  boxSizing: \"border-box\",\r\n  textOverflow: \"ellipsis\",\r\n  whiteSpace: \"nowrap\",\r\n  overflow: \"hidden\",\r\n};\r\n\r\ntype DragData = {\r\n  isDragging: boolean;\r\n  currentColumn: number;\r\n  startX: number;\r\n  columns: number[];\r\n};\r\n\r\nfunction ResizableColumn() {\r\n  const divRef = useRef<HTMLDivElement>(null);\r\n  const dragData = useRef<DragData>({\r\n    isDragging: false,\r\n    currentColumn: -1,\r\n    startX: 0,\r\n    columns: [],\r\n  });\r\n\r\n  const getColumnsWidth = () => {\r\n    if (!divRef.current) return;\r\n    const templateColumns = window.getComputedStyle(\r\n      divRef.current\r\n    ).gridTemplateColumns;\r\n    const result = templateColumns\r\n      .split(\" \")\r\n      .map((text) => Number(text.replace(\"px\", \"\")));\r\n    return result;\r\n  };\r\n\r\n  const CheckGridBorder = (x: number, columns: number[]) => {\r\n    let accumulator = 0;\r\n    let isOnBorder = false;\r\n    let columnIndex = 0;\r\n    for (let i = 0; i < columns.length - 1; i++) {\r\n      accumulator += columns[i];\r\n      if (Math.abs(x - accumulator) <= 4) {\r\n        isOnBorder = true;\r\n        columnIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return { isOnBorder, columnIndex };\r\n  };\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (!divRef.current) return;\r\n    const columns = getColumnsWidth();\r\n    if (!columns) return;\r\n    const { clientX, buttons } = e;\r\n    const { offsetLeft } = divRef.current;\r\n    const x = clientX - offsetLeft;\r\n\r\n    const isLeftButtonPressed = buttons === 1;\r\n    const { isDragging } = dragData.current;\r\n\r\n    if (isDragging) {\r\n      if (isLeftButtonPressed) dragging(x);\r\n      else endDragging();\r\n      return;\r\n    }\r\n\r\n    const { isOnBorder, columnIndex } = CheckGridBorder(x, columns);\r\n\r\n    if (isLeftButtonPressed && !isDragging) {\r\n      startDragging({\r\n        columnIndex: isOnBorder ? columnIndex : -1,\r\n        startX: x,\r\n        columns,\r\n      });\r\n      return;\r\n    }\r\n\r\n    divRef.current.style.cursor = isOnBorder ? \"e-resize\" : \"\";\r\n  };\r\n\r\n  const startDragging = ({\r\n    columnIndex,\r\n    columns,\r\n    startX,\r\n  }: {\r\n    columnIndex: number;\r\n    startX: number;\r\n    columns: number[];\r\n  }) => {\r\n    dragData.current = {\r\n      currentColumn: columnIndex,\r\n      isDragging: true,\r\n      startX,\r\n      columns,\r\n    };\r\n  };\r\n\r\n  const endDragging = () => {\r\n    if (!divRef.current) return;\r\n    dragData.current = {\r\n      currentColumn: -1,\r\n      isDragging: false,\r\n      startX: 0,\r\n      columns: [],\r\n    };\r\n  };\r\n\r\n  const dragging = (x: number) => {\r\n    const { currentColumn, startX, columns } = dragData.current;\r\n    if (currentColumn < 0 || !divRef.current) return;\r\n    const mouseDragAmount = x - startX;\r\n    const minColumnWidth = 12;\r\n    const maxDragAmount = columns[currentColumn + 1] - minColumnWidth;\r\n    const minDragAmount = -(columns[currentColumn] - minColumnWidth);\r\n    const columnDragAmount = Math.max(\r\n      Math.min(mouseDragAmount, maxDragAmount),\r\n      minDragAmount\r\n    );\r\n    const newColumns = [...columns];\r\n    newColumns[currentColumn] += columnDragAmount;\r\n    newColumns[currentColumn + 1] -= columnDragAmount;\r\n    const templateColumns = newColumns.reduce((prev, width, i) => {\r\n      return prev + width + \"px \";\r\n    }, \"\");\r\n    divRef.current.style.gridTemplateColumns = templateColumns;\r\n    divRef.current.style.cursor = \"e-resize\";\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={divRef}\r\n      style={{\r\n        width: \"600px\",\r\n        height: \"200px\",\r\n        display: \"grid\",\r\n        gridAutoFlow: \"column\",\r\n        border: \"1px solid black\",\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        boxSizing: \"border-box\",\r\n        gridAutoColumns: \"1fr\",\r\n      }}\r\n      onMouseMove={handleMouseMove}\r\n      onDragStart={(e) => e.preventDefault()}\r\n    >\r\n      <div style={itemStyle}>\r\n        Lorem Ipsum is simply dummy text of the printing and typesetting\r\n        industry. Lorem Ipsum has been the industry's standard dummy text ever\r\n        since the 1500s, when an unknown printer took a galley of type and\r\n        scrambled it to make a type specimen book. It has survived not only five\r\n        centuries, but also the leap into electronic typesetting, remaining\r\n        essentially unchanged. It was popularised in the 1960s with the release\r\n        of Letraset sheets containing Lorem Ipsum passages, and more recently\r\n        with desktop publishing software like Aldus PageMaker including versions\r\n        of Lorem Ipsum.\r\n      </div>\r\n      <div style={itemStyle} />\r\n      <div style={itemStyle} />\r\n      <div style={itemStyle} />\r\n      <div style={itemStyle} />\r\n      <div />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResizableColumn;\r\n","import React from \"react\";\r\nimport ResizableColumn from \"./ResizableColumn\";\r\n\r\nfunction App() {\r\n  return <ResizableColumn />;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}