{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","error","setError","inputRef","useRef","imageRef","handleUpload","useCallback","e","uploadedFile","target","files","file","validFormats","i","length","type","includes","isImageValid","current","src","URL","createObjectURL","handleButtonClick","click","onChange","name","accept","ref","hidden","onClick","style","width","color","alt","onLoad","currentTarget","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sKAuEeA,MAzDf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAyB,MACpCC,EAAWD,iBAAyB,MAEpCE,EAAeC,uBAAY,SAACC,GAA4C,IAAD,EACrEC,EAAY,UAAGD,EAAEE,OAAOC,aAAZ,aAAG,EAAiB,GACjCF,GApBY,SAACG,GAGpB,IAFA,IAAMC,EAAe,CAAC,MAAO,OAAQ,OAE5BC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IACvC,GAAIF,EAAKI,KAAKC,SAASJ,EAAaC,IAClC,OAAO,EAIX,OAAO,EAWiBI,CAAaT,IAK/BJ,EAASc,UACXd,EAASc,QAAQC,IAAMC,IAAIC,gBAAgBb,IAG7CP,EAAS,KARPA,EAAS,oBASV,IAEGqB,EAAoBhB,uBAAY,WAAO,IAAD,EAC1C,UAAAJ,EAASgB,eAAT,SAAkBK,UACjB,IAEH,OACE,qCACE,uCACA,uBACEC,SAAUnB,EACVU,KAAK,OACLU,KAAK,QACLC,OAAO,UACPC,IAAKzB,EACL0B,QAAM,IAER,wBACEC,QAASP,EACTQ,MAAO,CACLC,MAAO,QAHX,yBAQC/B,GAAS,mBAAG8B,MAAO,CAAEE,MAAO,OAAnB,SAA6BhC,IACvC,qBACE4B,QAAM,EACNK,IAAI,gBACJN,IAAKvB,EACL0B,MAAO,CACLC,MAAO,QAETG,OAAQ,SAAC3B,GAAD,OAAQA,EAAE4B,cAAcP,QAAS,SC7DjDQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e2212114.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from \"react\";\n\nconst isImageValid = (file: File): boolean => {\n  const validFormats = [\"jpg\", \"jpeg\", \"png\"];\n\n  for (let i = 0; i < validFormats.length; i++) {\n    if (file.type.includes(validFormats[i])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nfunction App() {\n  const [error, setError] = useState(\"\");\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const imageRef = useRef<HTMLImageElement>(null);\n\n  const handleUpload = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const uploadedFile = e.target.files?.[0];\n    if (!uploadedFile || !isImageValid(uploadedFile)) {\n      setError(\"Invalid Format\");\n      return;\n    }\n\n    if (imageRef.current) {\n      imageRef.current.src = URL.createObjectURL(uploadedFile);\n    }\n\n    setError(\"\");\n  }, []);\n\n  const handleButtonClick = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <>\n      <div>0.03</div>\n      <input\n        onChange={handleUpload}\n        type=\"file\"\n        name=\"image\"\n        accept=\"image/*\"\n        ref={inputRef}\n        hidden\n      />\n      <button\n        onClick={handleButtonClick}\n        style={{\n          width: \"100%\",\n        }}\n      >\n        Upload File\n      </button>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n      <img\n        hidden\n        alt=\"uploaded file\"\n        ref={imageRef}\n        style={{\n          width: \"100%\",\n        }}\n        onLoad={(e) => (e.currentTarget.hidden = false)}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}